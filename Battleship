//
//  Battleship.cpp
//  C++ Program
//

#include <iostream>
#include <cctype>
#include <clocale>
#include <cstdlib>
#include <vector>
#include <sstream>

using namespace std;


class Point
{
private:
    int x;
    int y;
    
public:
    Point(){};
    Point(string coord)
    {
        x = (std::toupper(coord.at(1))) - ('A');
        y = (coord.at(0)) - ('1');
    }
    
    int getX()
    {
        return x;
    }
    int getY()
    {
        return y;
    }
    bool greaterOrEqual(Point other)
    {
        return x >= other.x && y >= other.y;
    }
    string toString()
    {
        char sResult[20];
        sprintf(sResult,"(%d,%d)",x,y);
        
        return string(sResult);
    }
};

class Ship
{
private:
    Point topLeft;
    Point bottomRight;
    
public:
    Ship(){}
    Ship(Point &oTopLeft, Point &oBottomRight)
    {
        topLeft = oTopLeft;
        bottomRight = oBottomRight;
    }
    Point getTopLeft()
    {
        return topLeft;
    }
    Point getBottomRight()
    {
        return bottomRight;
    }
    int getSize()
    {
        return (abs(topLeft.getX() - bottomRight.getX()) + 1)
        * (abs(topLeft.getY() - bottomRight.getY()) + 1);
    }
    
    
    int getHits(vector<Point> &shots)
    {
        int hits = 0;
        for (auto x : shots)
        {
            if (x.greaterOrEqual(topLeft) && bottomRight.greaterOrEqual(x))
            {
                hits++;
            }
        }
        
        
        return hits;
    }
};
class Battleship
{
 public:
    Battleship(){};
    
string solution(int N, string &S, string &T)
{
        vector<Ship> ships = parseShips(S, N * N);
        vector<Point> hits = parseHits(T, N * N);
        
        int touched = 0, sunken = 0;
        
        for (auto x : ships)
        {
            int touching =x.getHits(hits);
            if (touching > 0)
            {
                if (touching == x.getSize())
                {
                    sunken++;
                }
                else
                {
                    touched++;
                }
            }
        }
    
    char sResult[20];
    sprintf(sResult,"%d,%d",sunken,touched);
    
    return string(sResult);
    
}
    
    
vector<Point> parseHits(string &ships, int maxHits)
{
        vector<Point> pointList;
        
        stringstream check1(ships);
        string intermediate1;
        
        while(getline(check1, intermediate1, ' '))
        {
                Point p(intermediate1);
                pointList.push_back(p);
        }
        
        return pointList;
}
    
vector<Ship> parseShips(string &ships, int maxShips)
{
        vector<Ship> shipsList;
        
        stringstream check1(ships);
        string intermediate1;
        
        while(getline(check1, intermediate1, ','))
        {
            stringstream check2(intermediate1);
            string intermediate2;
            
            Point p[2];
            int i=0;
            while(getline(check2, intermediate2, ' '))
            {
                Point p1(intermediate2);
                p[i] = p1;
                i++;
            }
            Ship ship(p[0],p[1]);
            shipsList.push_back(ship);
           
        }
        
        return shipsList;
}
    

};


    


int main()
{
    Battleship b;
    
    string S = "1B 2C,2D 5D";
    string T = "2B 2D 3D 4D 4A";
    string Result = b.solution(5,S,T);
    
    cout<<"Result = " <<Result <<endl;
    
    
}

