

#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

vector< pair<int, int> > findSubArrays(int arr[], int n)
{
    unordered_map<int, vector<int> > SumMap;

    vector <pair<int, int>> PairVec;

    int sum = 0;
    
    for (int i = 0; i < n; i++)
    {
 
        sum += arr[i];

        if (sum == 0)
        {
            PairVec.push_back(make_pair(0, i));

        }
        

        
        if (SumMap.find(sum) != SumMap.end())
        {
           vector<int> tmpPairVec = SumMap[sum];
            
            for (auto it = tmpPairVec.begin(); it != tmpPairVec.end(); it++)
            {
                PairVec.push_back(make_pair(*it + 1, i));
              
            }
        }
        
        
        SumMap[sum].push_back(i);
    }
    
  
    return PairVec;
}


void print(vector<pair<int, int>> out)
{
    for (auto it = out.begin(); it != out.end(); it++)
        cout << "Subarray found from Index " <<
        it->first << " to " << it->second << endl;
}


int main()
{
    
    int arr[] = {-1,-5,6, 3, -1, -3, 4, -2, 2, 4, 6, -12, -7};
    int n = sizeof(arr)/sizeof(arr[0]);
    
    vector<pair<int, int> > out = findSubArrays(arr, n);
  
    if (out.size() == 0)
        cout << "No subarray exists";
    else
        print(out);
    
    return 0;
}
